# Add an on_boot trigger to read thresholds and update sliders
esphome:
# Your configuration goes here
  on_boot:
    priority: -100  # Run after everything else is initialized
    then:
      - delay: 10s  # Wait for radar module to fully initialize
      - logger.log: "Reading thresholds and syncing sliders on boot"
      - button.press: read_all_thresholds  # Use the new combined button

# More of your configuration goes here

# UART configuration for HLK-LD2402
uart:
  id: uart_bus
  tx_pin: GPIO1  # TX0 hardware UART
  rx_pin: GPIO3  # RX0 hardware UART
  baud_rate: 115200
  data_bits: 8
  parity: NONE
  stop_bits: 1

# HLK-LD2402 radar component
external_components:
  - source:
      type: git
      url: https://github.com/mouldybread/hlk_ld2402_esphome
#    refresh: 0ms

hlk_ld2402:
  uart_id: uart_bus
  id: radar_sensor
  max_distance: 5.0
  timeout: 5
  throttle: 2000ms         # Distance sensor throttling
  presence_throttle: 1000ms # Presence sensor throttling
  motion_throttle: 1000ms   # Motion sensor throttling
  
# Binary sensors
binary_sensor:
  - platform: hlk_ld2402
    id: radar_presence
    name: "Presence"
    presence: true  # Add explicit presence setting
    device_class: motion
    hlk_ld2402_id: radar_sensor
  
  - platform: hlk_ld2402
    name: "Motion"
    motion: true
    device_class: motion  # Change to motion device class for consistency
    hlk_ld2402_id: radar_sensor

  - platform: hlk_ld2402
    id: radar_power_interference
    name: "Radar Power Interference"
    device_class: problem
    power_interference: true
    hlk_ld2402_id: radar_sensor

# Distance sensor
sensor:
  - platform: hlk_ld2402
    id: radar_distance
    name: "Distance"
    hlk_ld2402_id: radar_sensor
    device_class: distance
    unit_of_measurement: "cm"
    accuracy_decimals: 1
    throttle: 2000ms  # Use direct parameter for throttling
    
  # Calibration progress sensor
  - platform: hlk_ld2402
    id: radar_calibration_progress
    name: "Radar Calibration Progress"
    hlk_ld2402_id: radar_sensor
    unit_of_measurement: "%"
    icon: "mdi:progress-wrench"
    entity_category: diagnostic
    state_class: measurement
    calibration_progress: true

  # All 15 energy gate sensors (0-14)
  - platform: hlk_ld2402
    id: radar_energy_gate_00
    name: "Energy Gate 00 (0.0-0.7m)"
    hlk_ld2402_id: radar_sensor
    state_class: measurement
    unit_of_measurement: "dB"
    icon: "mdi:antenna"
    entity_category: diagnostic
    energy_gate:
      gate_index: 0
      
  - platform: hlk_ld2402
    id: radar_energy_gate_01
    name: "Energy Gate 01 (0.7-1.4m)"
    hlk_ld2402_id: radar_sensor
    state_class: measurement
    unit_of_measurement: "dB"
    icon: "mdi:antenna"
    entity_category: diagnostic
    energy_gate:
      gate_index: 1
      
  - platform: hlk_ld2402
    id: radar_energy_gate_02
    name: "Energy Gate 02 (1.4-2.1m)"
    hlk_ld2402_id: radar_sensor
    state_class: measurement
    unit_of_measurement: "dB"
    icon: "mdi:antenna"
    entity_category: diagnostic
    energy_gate:
      gate_index: 2
      
  - platform: hlk_ld2402
    id: radar_energy_gate_03
    name: "Energy Gate 03 (2.1-2.8m)"
    hlk_ld2402_id: radar_sensor
    state_class: measurement
    unit_of_measurement: "dB"
    icon: "mdi:antenna"
    entity_category: diagnostic
    energy_gate:
      gate_index: 3
      
  - platform: hlk_ld2402
    id: radar_energy_gate_04
    name: "Energy Gate 04 (2.8-3.5m)"
    hlk_ld2402_id: radar_sensor
    state_class: measurement
    unit_of_measurement: "dB"
    icon: "mdi:antenna"
    entity_category: diagnostic
    energy_gate:
      gate_index: 4

  - platform: hlk_ld2402
    id: radar_energy_gate_05
    name: "Energy Gate 05 (3.5-4.2m)"
    hlk_ld2402_id: radar_sensor
    state_class: measurement
    unit_of_measurement: "dB"
    icon: "mdi:antenna"
    entity_category: diagnostic
    energy_gate:
      gate_index: 5
      
  - platform: hlk_ld2402
    id: radar_energy_gate_06
    name: "Energy Gate 06 (4.2-4.9m)"
    hlk_ld2402_id: radar_sensor
    state_class: measurement
    unit_of_measurement: "dB"
    icon: "mdi:antenna"
    entity_category: diagnostic
    energy_gate:
      gate_index: 6
      
  - platform: hlk_ld2402
    id: radar_energy_gate_07
    name: "Energy Gate 07 (4.9-5.6m)"
    hlk_ld2402_id: radar_sensor
    state_class: measurement
    unit_of_measurement: "dB"
    icon: "mdi:antenna"
    entity_category: diagnostic
    energy_gate:
      gate_index: 7
      
  - platform: hlk_ld2402
    id: radar_energy_gate_08
    name: "Energy Gate 08 (5.6-6.3m)"
    hlk_ld2402_id: radar_sensor
    state_class: measurement
    unit_of_measurement: "dB"
    icon: "mdi:antenna"
    entity_category: diagnostic
    energy_gate:
      gate_index: 8
      
  - platform: hlk_ld2402
    id: radar_energy_gate_09
    name: "Energy Gate 09 (6.3-7.0m)"
    hlk_ld2402_id: radar_sensor
    state_class: measurement
    unit_of_measurement: "dB"
    icon: "mdi:antenna"
    entity_category: diagnostic
    energy_gate:
      gate_index: 9
      
  - platform: hlk_ld2402
    id: radar_energy_gate_10
    name: "Energy Gate 10 (7.0-7.7m)"
    hlk_ld2402_id: radar_sensor
    state_class: measurement
    unit_of_measurement: "dB"
    icon: "mdi:antenna"
    entity_category: diagnostic
    energy_gate:
      gate_index: 10
      
  - platform: hlk_ld2402
    id: radar_energy_gate_11
    name: "Energy Gate 11 (7.7-8.4m)"
    hlk_ld2402_id: radar_sensor
    state_class: measurement
    unit_of_measurement: "dB"
    icon: "mdi:antenna"
    entity_category: diagnostic
    energy_gate:
      gate_index: 11
      
  - platform: hlk_ld2402
    id: radar_energy_gate_12
    name: "Energy Gate 12 (8.4-9.1m)"
    hlk_ld2402_id: radar_sensor
    state_class: measurement
    unit_of_measurement: "dB"
    icon: "mdi:antenna"
    entity_category: diagnostic
    energy_gate:
      gate_index: 12
      
  - platform: hlk_ld2402
    id: radar_energy_gate_13
    name: "Energy Gate 13 (9.1-9.8m)"
    hlk_ld2402_id: radar_sensor
    state_class: measurement
    unit_of_measurement: "dB"
    icon: "mdi:antenna"
    entity_category: diagnostic
    energy_gate:
      gate_index: 13
      
  - platform: hlk_ld2402
    id: radar_energy_gate_14
    name: "Energy Gate 14 (9.8-10.5m)"
    hlk_ld2402_id: radar_sensor
    state_class: measurement
    unit_of_measurement: "dB"
    icon: "mdi:antenna"
    entity_category: diagnostic
    energy_gate:
      gate_index: 14


# Text sensors
text_sensor:
  - platform: hlk_ld2402
    id: radar_firmware_version
    name: "Radar Firmware Version"
    entity_category: diagnostic
    hlk_ld2402_id: radar_sensor
    firmware_version: true

  - platform: hlk_ld2402
    id: radar_operating_mode
    name: "Radar Operating Mode"
    entity_category: diagnostic
    hlk_ld2402_id: radar_sensor
    operating_mode: true

# Control buttons - using template buttons 
button:
  - platform: template
    name: "${friendly_name} Commit Parameter Changes"
    on_press:
      - lambda: id(radar_sensor).commit_batch_update();  # Changed from radar to radar_sensor
      
  - platform: template
    name: "${friendly_name} Cancel Parameter Changes"
    on_press:
      - lambda: id(radar_sensor).cancel_batch_update();  # Changed from radar to radar_sensor

  - platform: template
    name: "Check Radar Firmware Version"
    icon: "mdi:information-outline"
    on_press:
      - lambda: id(radar_sensor).get_firmware_version_();
  - platform: template
    name: "Check Power Interference"
    icon: "mdi:power-plug"
    on_press:
      - lambda: id(radar_sensor).check_power_interference();
  - platform: template
    name: "Calibrate"
    on_press:
      - lambda: id(radar_sensor).calibrate();

  - platform: template
    name: "Auto Gain"
    on_press:
      - lambda: id(radar_sensor).enable_auto_gain();

  - platform: template
    name: "Save Config"
    on_press:
      - lambda: id(radar_sensor).save_config();

  # Replace the toggle button with two separate mode buttons
  - platform: template
    name: "Set Engineering Mode"
    icon: "mdi:tune-variant"
    on_press:
      - lambda: id(radar_sensor).set_engineering_mode_direct();

  - platform: template
    name: "Set Normal Mode" 
    icon: "mdi:tune-variant-off"
    on_press:
      - lambda: id(radar_sensor).set_normal_mode_direct();
      
  # Settings reset button with warning icon
  - platform: template
    name: "Reset Settings"  # Changed from "Factory Reset"
    icon: "mdi:factory-reset"
    on_press:
      # Add a warning log message before reset
      - logger.log: "WARNING: Performing factory reset on radar module"
      - lambda: id(radar_sensor).factory_reset();

  - platform: template
    name: "Generate Thresholds with Sensitivity Inputs"  # Changed from "Run Calibration with Multipliers"
    icon: "mdi:tune-vertical-variant"
    on_press:
      - lambda: |-
          id(radar_sensor).calibrate_with_coefficients(
            id(trigger_coefficient).state,
            id(hold_coefficient).state,
            id(static_coefficient).state
          );

  # Keep only the combined button to read all thresholds, removing the separate buttons
  - platform: template
    name: "Read All Thresholds"
    id: read_all_thresholds
    icon: "mdi:refresh"
    entity_category: diagnostic
    on_press:
      - lambda: |-
          // First read motion thresholds
          auto motion_thresholds = id(radar_sensor).read_and_get_motion_thresholds();
          
          // Update motion threshold sliders
          if (motion_thresholds.size() > 0) id(gate_00_motion_threshold).publish_state(motion_thresholds[0]);
          if (motion_thresholds.size() > 1) id(gate_01_motion_threshold).publish_state(motion_thresholds[1]);
          if (motion_thresholds.size() > 2) id(gate_02_motion_threshold).publish_state(motion_thresholds[2]);
          if (motion_thresholds.size() > 3) id(gate_03_motion_threshold).publish_state(motion_thresholds[3]);
          if (motion_thresholds.size() > 4) id(gate_04_motion_threshold).publish_state(motion_thresholds[4]);
          if (motion_thresholds.size() > 5) id(gate_05_motion_threshold).publish_state(motion_thresholds[5]);
          if (motion_thresholds.size() > 6) id(gate_06_motion_threshold).publish_state(motion_thresholds[6]);
          if (motion_thresholds.size() > 7) id(gate_07_motion_threshold).publish_state(motion_thresholds[7]);
          if (motion_thresholds.size() > 8) id(gate_08_motion_threshold).publish_state(motion_thresholds[8]);
          if (motion_thresholds.size() > 9) id(gate_09_motion_threshold).publish_state(motion_thresholds[9]);
          if (motion_thresholds.size() > 10) id(gate_10_motion_threshold).publish_state(motion_thresholds[10]);
          if (motion_thresholds.size() > 11) id(gate_11_motion_threshold).publish_state(motion_thresholds[11]);
          if (motion_thresholds.size() > 12) id(gate_12_motion_threshold).publish_state(motion_thresholds[12]);
          if (motion_thresholds.size() > 13) id(gate_13_motion_threshold).publish_state(motion_thresholds[13]);
          if (motion_thresholds.size() > 14) id(gate_14_motion_threshold).publish_state(motion_thresholds[14]);
          
          // Delay to ensure device has time to process before next command
          delay(1000);
          
          // Then read static thresholds
          auto static_thresholds = id(radar_sensor).read_and_get_static_thresholds();
          
          // Update static threshold sliders
          if (static_thresholds.size() > 0) id(gate_00_static_threshold).publish_state(static_thresholds[0]);
          if (static_thresholds.size() > 1) id(gate_01_static_threshold).publish_state(static_thresholds[1]);
          if (static_thresholds.size() > 2) id(gate_02_static_threshold).publish_state(static_thresholds[2]);
          if (static_thresholds.size() > 3) id(gate_03_static_threshold).publish_state(static_thresholds[3]);
          if (static_thresholds.size() > 4) id(gate_04_static_threshold).publish_state(static_thresholds[4]);
          if (static_thresholds.size() > 5) id(gate_05_static_threshold).publish_state(static_thresholds[5]);
          if (static_thresholds.size() > 6) id(gate_06_static_threshold).publish_state(static_thresholds[6]);
          if (static_thresholds.size() > 7) id(gate_07_static_threshold).publish_state(static_thresholds[7]);
          if (static_thresholds.size() > 8) id(gate_08_static_threshold).publish_state(static_thresholds[8]);
          if (static_thresholds.size() > 9) id(gate_09_static_threshold).publish_state(static_thresholds[9]);
          if (static_thresholds.size() > 10) id(gate_10_static_threshold).publish_state(static_thresholds[10]);
          if (static_thresholds.size() > 11) id(gate_11_static_threshold).publish_state(static_thresholds[11]);
          if (static_thresholds.size() > 12) id(gate_12_static_threshold).publish_state(static_thresholds[12]);
          if (static_thresholds.size() > 13) id(gate_13_static_threshold).publish_state(static_thresholds[13]);
          if (static_thresholds.size() > 14) id(gate_14_static_threshold).publish_state(static_thresholds[14]);
          
          // Log completion
          ESP_LOGI("threshold_sync", "All threshold sliders updated");

# Add sliders for calibration coefficients and gate thresholds - all sliders must be in number section
number:
  - platform: template
    name: "Calibration: Trigger Multiplier"  # Updated name to clarify purpose
    id: trigger_coefficient
    optimistic: true
    min_value: 1.0
    max_value: 20.0
    step: 0.1
    initial_value: 3.5
    icon: "mdi:tune-vertical"
    unit_of_measurement: "x"
    entity_category: config  # Add this to indicate it's a configuration parameter

  - platform: template
    name: "Calibration: Hold Multiplier"  # Updated name
    id: hold_coefficient
    optimistic: true
    min_value: 1.0
    max_value: 20.0
    step: 0.1
    initial_value: 3.0
    icon: "mdi:tune-vertical"
    unit_of_measurement: "x"
    entity_category: config  # Add this to indicate it's a configuration parameter
    
  - platform: template
    name: "Calibration: Static Multiplier"  # Updated name
    id: static_coefficient
    optimistic: true
    min_value: 1.0
    max_value: 20.0
    step: 0.1
    initial_value: 4.0
    icon: "mdi:tune-vertical"
    unit_of_measurement: "x"
    entity_category: config  # Add this to indicate it's a configuration parameter

  # Motion threshold sliders for gates
  - platform: template
    name: "Motion Gate 00 Threshold"
    id: gate_00_motion_threshold
    optimistic: true
    min_value: 0.0
    max_value: 95.0
    step: 1.0
    initial_value: 45.0
    icon: "mdi:radar"
    unit_of_measurement: "dB"
    on_value:
      - lambda: |-
          id(radar_sensor).set_gate_motion_threshold(0, id(gate_00_motion_threshold).state);
  
  - platform: template
    name: "Motion Gate 01 Threshold"
    id: gate_01_motion_threshold
    optimistic: true
    min_value: 0.0
    max_value: 95.0
    step: 1.0
    initial_value: 45.0
    icon: "mdi:radar"
    unit_of_measurement: "dB"
    on_value:
      - lambda: |-
          id(radar_sensor).set_gate_motion_threshold(1, id(gate_01_motion_threshold).state);
  
  - platform: template
    name: "Motion Gate 02 Threshold"
    id: gate_02_motion_threshold
    optimistic: true
    min_value: 0.0
    max_value: 95.0
    step: 1.0
    initial_value: 45.0
    icon: "mdi:radar"
    unit_of_measurement: "dB"
    on_value:
      - lambda: |-
          id(radar_sensor).set_gate_motion_threshold(2, id(gate_02_motion_threshold).state);
          
  - platform: template
    name: "Motion Gate 03 Threshold"
    id: gate_03_motion_threshold
    optimistic: true
    min_value: 0.0
    max_value: 95.0
    step: 1.0
    initial_value: 45.0
    icon: "mdi:radar"
    unit_of_measurement: "dB"
    on_value:
      - lambda: |-
          id(radar_sensor).set_gate_motion_threshold(3, id(gate_03_motion_threshold).state);
          
  - platform: template
    name: "Motion Gate 04 Threshold"
    id: gate_04_motion_threshold
    optimistic: true
    min_value: 0.0
    max_value: 95.0
    step: 1.0
    initial_value: 45.0
    icon: "mdi:radar"
    unit_of_measurement: "dB"
    on_value:
      - lambda: |-
          id(radar_sensor).set_gate_motion_threshold(4, id(gate_04_motion_threshold).state);
          
  - platform: template
    name: "Motion Gate 05 Threshold"
    id: gate_05_motion_threshold
    optimistic: true
    min_value: 0.0
    max_value: 95.0
    step: 1.0
    initial_value: 45.0
    icon: "mdi:radar"
    unit_of_measurement: "dB"
    on_value:
      - lambda: |-
          id(radar_sensor).set_gate_motion_threshold(5, id(gate_05_motion_threshold).state);
          
  - platform: template
    name: "Motion Gate 06 Threshold"
    id: gate_06_motion_threshold
    optimistic: true
    min_value: 0.0
    max_value: 95.0
    step: 1.0
    initial_value: 45.0
    icon: "mdi:radar"
    unit_of_measurement: "dB"
    on_value:
      - lambda: |-
          id(radar_sensor).set_gate_motion_threshold(6, id(gate_06_motion_threshold).state);
          
  - platform: template
    name: "Motion Gate 07 Threshold"
    id: gate_07_motion_threshold
    optimistic: true
    min_value: 0.0
    max_value: 95.0
    step: 1.0
    initial_value: 45.0
    icon: "mdi:radar"
    unit_of_measurement: "dB"
    on_value:
      - lambda: |-
          id(radar_sensor).set_gate_motion_threshold(7, id(gate_07_motion_threshold).state);
          
  - platform: template
    name: "Motion Gate 08 Threshold"
    id: gate_08_motion_threshold
    optimistic: true
    min_value: 0.0
    max_value: 95.0
    step: 1.0
    initial_value: 45.0
    icon: "mdi:radar"
    unit_of_measurement: "dB"
    on_value:
      - lambda: |-
          id(radar_sensor).set_gate_motion_threshold(8, id(gate_08_motion_threshold).state);
          
  - platform: template
    name: "Motion Gate 09 Threshold"
    id: gate_09_motion_threshold
    optimistic: true
    min_value: 0.0
    max_value: 95.0
    step: 1.0
    initial_value: 45.0
    icon: "mdi:radar"
    unit_of_measurement: "dB"
    on_value:
      - lambda: |-
          id(radar_sensor).set_gate_motion_threshold(9, id(gate_09_motion_threshold).state);
          
  - platform: template
    name: "Motion Gate 10 Threshold"
    id: gate_10_motion_threshold
    optimistic: true
    min_value: 0.0
    max_value: 95.0
    step: 1.0
    initial_value: 45.0
    icon: "mdi:radar"
    unit_of_measurement: "dB"
    on_value:
      - lambda: |-
          id(radar_sensor).set_gate_motion_threshold(10, id(gate_10_motion_threshold).state);
          
  - platform: template
    name: "Motion Gate 11 Threshold"
    id: gate_11_motion_threshold
    optimistic: true
    min_value: 0.0
    max_value: 95.0
    step: 1.0
    initial_value: 45.0
    icon: "mdi:radar"
    unit_of_measurement: "dB"
    on_value:
      - lambda: |-
          id(radar_sensor).set_gate_motion_threshold(11, id(gate_11_motion_threshold).state);
          
  - platform: template
    name: "Motion Gate 12 Threshold"
    id: gate_12_motion_threshold
    optimistic: true
    min_value: 0.0
    max_value: 95.0
    step: 1.0
    initial_value: 45.0
    icon: "mdi:radar"
    unit_of_measurement: "dB"
    on_value:
      - lambda: |-
          id(radar_sensor).set_gate_motion_threshold(12, id(gate_12_motion_threshold).state);
          
  - platform: template
    name: "Motion Gate 13 Threshold"
    id: gate_13_motion_threshold
    optimistic: true
    min_value: 0.0
    max_value: 95.0
    step: 1.0
    initial_value: 45.0
    icon: "mdi:radar"
    unit_of_measurement: "dB"
    on_value:
      - lambda: |-
          id(radar_sensor).set_gate_motion_threshold(13, id(gate_13_motion_threshold).state);
          
  - platform: template
    name: "Motion Gate 14 Threshold"
    id: gate_14_motion_threshold
    optimistic: true
    min_value: 0.0
    max_value: 95.0
    step: 1.0
    initial_value: 45.0
    icon: "mdi:radar"
    unit_of_measurement: "dB"
    on_value:
      - lambda: |-
          id(radar_sensor).set_gate_motion_threshold(14, id(gate_14_motion_threshold).state);

  # Static threshold sliders for gates (renamed from Micromotion)
  - platform: template
    name: "Static Gate 00 Threshold"
    id: gate_00_static_threshold
    optimistic: true
    min_value: 0.0
    max_value: 95.0
    step: 1.0
    initial_value: 40.0
    icon: "mdi:hand-wave"
    unit_of_measurement: "dB"
    on_value:
      - lambda: |-
          id(radar_sensor).set_gate_static_threshold(0, id(gate_00_static_threshold).state);
  
  - platform: template
    name: "Static Gate 01 Threshold"
    id: gate_01_static_threshold
    optimistic: true
    min_value: 0.0
    max_value: 95.0
    step: 1.0
    initial_value: 40.0
    icon: "mdi:hand-wave"
    unit_of_measurement: "dB"
    on_value:
      - lambda: |-
          id(radar_sensor).set_gate_static_threshold(1, id(gate_01_static_threshold).state);
  
  - platform: template
    name: "Static Gate 02 Threshold"
    id: gate_02_static_threshold
    optimistic: true
    min_value: 0.0
    max_value: 95.0
    step: 1.0
    initial_value: 40.0
    icon: "mdi:hand-wave"
    unit_of_measurement: "dB"
    on_value:
      - lambda: |-
          id(radar_sensor).set_gate_static_threshold(2, id(gate_02_static_threshold).state);
          
  - platform: template
    name: "Static Gate 03 Threshold"
    id: gate_03_static_threshold
    optimistic: true
    min_value: 0.0
    max_value: 95.0
    step: 1.0
    initial_value: 40.0
    icon: "mdi:hand-wave"
    unit_of_measurement: "dB"
    on_value:
      - lambda: |-
          id(radar_sensor).set_gate_static_threshold(3, id(gate_03_static_threshold).state);
          
  - platform: template
    name: "Static Gate 04 Threshold"
    id: gate_04_static_threshold
    optimistic: true
    min_value: 0.0
    max_value: 95.0
    step: 1.0
    initial_value: 40.0
    icon: "mdi:hand-wave"
    unit_of_measurement: "dB"
    on_value:
      - lambda: |-
          id(radar_sensor).set_gate_static_threshold(4, id(gate_04_static_threshold).state);
          
  - platform: template
    name: "Static Gate 05 Threshold"
    id: gate_05_static_threshold
    optimistic: true
    min_value: 0.0
    max_value: 95.0
    step: 1.0
    initial_value: 40.0
    icon: "mdi:hand-wave"
    unit_of_measurement: "dB"
    on_value:
      - lambda: |-
          id(radar_sensor).set_gate_static_threshold(5, id(gate_05_static_threshold).state);
          
  - platform: template
    name: "Static Gate 06 Threshold"
    id: gate_06_static_threshold
    optimistic: true
    min_value: 0.0
    max_value: 95.0
    step: 1.0
    initial_value: 40.0
    icon: "mdi:hand-wave"
    unit_of_measurement: "dB"
    on_value:
      - lambda: |-
          id(radar_sensor).set_gate_static_threshold(6, id(gate_06_static_threshold).state);
          
  - platform: template
    name: "Static Gate 07 Threshold"
    id: gate_07_static_threshold
    optimistic: true
    min_value: 0.0
    max_value: 95.0
    step: 1.0
    initial_value: 40.0
    icon: "mdi:hand-wave"
    unit_of_measurement: "dB"
    on_value:
      - lambda: |-
          id(radar_sensor).set_gate_static_threshold(7, id(gate_07_static_threshold).state);
          
  - platform: template
    name: "Static Gate 08 Threshold"
    id: gate_08_static_threshold
    optimistic: true
    min_value: 0.0
    max_value: 95.0
    step: 1.0
    initial_value: 40.0
    icon: "mdi:hand-wave"
    unit_of_measurement: "dB"
    on_value:
      - lambda: |-
          id(radar_sensor).set_gate_static_threshold(8, id(gate_08_static_threshold).state);
          
  - platform: template
    name: "Static Gate 09 Threshold"
    id: gate_09_static_threshold
    optimistic: true
    min_value: 0.0
    max_value: 95.0
    step: 1.0
    initial_value: 40.0
    icon: "mdi:hand-wave"
    unit_of_measurement: "dB"
    on_value:
      - lambda: |-
          id(radar_sensor).set_gate_static_threshold(9, id(gate_09_static_threshold).state);
          
  - platform: template
    name: "Static Gate 10 Threshold"
    id: gate_10_static_threshold
    optimistic: true
    min_value: 0.0
    max_value: 95.0
    step: 1.0
    initial_value: 40.0
    icon: "mdi:hand-wave"
    unit_of_measurement: "dB"
    on_value:
      - lambda: |-
          id(radar_sensor).set_gate_static_threshold(10, id(gate_10_static_threshold).state);
          
  - platform: template
    name: "Static Gate 11 Threshold"
    id: gate_11_static_threshold
    optimistic: true
    min_value: 0.0
    max_value: 95.0
    step: 1.0
    initial_value: 40.0
    icon: "mdi:hand-wave"
    unit_of_measurement: "dB"
    on_value:
      - lambda: |-
          id(radar_sensor).set_gate_static_threshold(11, id(gate_11_static_threshold).state);
          
  - platform: template
    name: "Static Gate 12 Threshold"
    id: gate_12_static_threshold
    optimistic: true
    min_value: 0.0
    max_value: 95.0
    step: 1.0
    initial_value: 40.0
    icon: "mdi:hand-wave"
    unit_of_measurement: "dB"
    on_value:
      - lambda: |-
          id(radar_sensor).set_gate_static_threshold(12, id(gate_12_static_threshold).state);
          
  - platform: template
    name: "Static Gate 13 Threshold"
    id: gate_13_static_threshold
    optimistic: true
    min_value: 0.0
    max_value: 95.0
    step: 1.0
    initial_value: 40.0
    icon: "mdi:hand-wave"
    unit_of_measurement: "dB"
    on_value:
      - lambda: |-
          id(radar_sensor).set_gate_static_threshold(13, id(gate_13_static_threshold).state);
          
  - platform: template
    name: "Static Gate 14 Threshold"
    id: gate_14_static_threshold
    optimistic: true
    min_value: 0.0
    max_value: 95.0
    step: 1.0
    initial_value: 40.0
    icon: "mdi:hand-wave"
    unit_of_measurement: "dB"
    on_value:
      - lambda: |-
          id(radar_sensor).set_gate_static_threshold(14, id(gate_14_static_threshold).state);

# Add status LED if available
status_led:
  pin: GPIO2